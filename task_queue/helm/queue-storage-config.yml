## Usage: helm install -f queue_storage_config.yml --name=queue-storage stable/redis

## NOTES: Redis can be accessed via port 6379 on the following DNS name from within your cluster:
##
## queue-storage-redis

## To get your password run:

## REDIS_PASSWORD=$(kubectl get secret queue-storage-redis -o jsonpath="{.data.redis-password}" | base64 --decode)

## To connect to your Redis server:

## 1. Run a Redis pod that you can use as a client:

## kubectl run queue-storage-redis-client --rm --tty -i --env REDIS_PASSWORD=$REDIS_PASSWORD --image bitnami/redis:3.2.9-r0 -- bash

## 2. Connect using the Redis CLI:

## redis-cli -h queue-storage-redis -a $REDIS_PASSWORD

##
## Bitnami Redis image version
## ref: https://hub.docker.com/r/bitnami/redis/tags/
##
image: bitnami/redis:3.2.9-r0

## Specify a imagePullPolicy√•
## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
##
imagePullPolicy: IfNotPresent

## Redis password
## Defaults to a random 10-character alphanumeric string if not set
## ref: https://github.com/bitnami/bitnami-docker-redis#setting-the-server-password-on-first-run
##
redisPassword: xtCWzoNXsC

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default
  ##
  # storageClass:
  accessMode: ReadWriteOnce
  size: 8Gi

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 256Mi
    cpu: 100m
